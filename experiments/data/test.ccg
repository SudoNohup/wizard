//Return true if the given non-negative number x is a multiple of 3 or a multiple of 5.

//Given two int values x and y, return their sum. Unless the two values are the same, then return double their sum.

//The parameter weekday is true if it is a weekday, and the parameter vacation is true if we are on vacation. We sleep in if it is not a weekday or we're on vacation. Return true if we sleep in. 

//Given an int n, return the absolute difference between n and 21, except return double the absolute difference if n is over 21. 

//Given an int n, return true if it is within 10 of 100 or 200. Note: Math.abs(num) computes the absolute value of a number. 

//Given a string, return true if the string starts with "hi" and false otherwise. 

//Given two temperatures, return true if one is less than 0 and the other is greater than 100. 

//Given two non-negative int values, return true if they have the same last digit, such as with 27 and 57. 

//Given 2 int values, return true if they are both in the range 30..40 inclusive, or they are both in the range 40..50 inclusive. 

//Given 2 ints, a and b, return true if one of them is 10 or if their sum is 10. 

//Given two int values, return their sum. Unless the two values are the same, then return double their sum.

//We'll say that a number is "teen" if it is in the range 13..19 inclusive. Given 3 int values, return true if 1 or more of them are teen. 

//Given a string, return a new string where "not " has been added to the front. However, if the string already begins with "not", return the string unchanged.

//Given a string, we'll say that the front is the first 3 chars of the string. If the string length is less than 3, the front is whatever is there. Return a new string which is 3 copies of the front. 

//Given a string, if the string "del" appears starting at index 1, return a string where that "del" has been deleted. Otherwise, return the string unchanged. 

//Given a string, return a new string where the last 3 chars are now in upper case. If the string has less than 3 chars, uppercase whatever is there.

//Given 2 positive int values, return the larger value that is in the range 10..20 inclusive, or return 0 if neither is in that range. 

//Given three int values, a b c, return the largest. 

//Given 2 int values, return true if either of them is in the range 10..20 inclusive. 

//We have two monkeys, a and b, and the parameters aSmile and bSmile indicate if each is smiling. We are in trouble if they are both smiling or if neither of them is smiling. Return true if we are in trouble. 

//We have a loud talking parrot. The "hour" parameter is the current hour time in the range 0..23. We are in trouble if the parrot is talking and the hour is before 7 or after 20. Return true if we are in trouble.

Given 2 int values, return true if one is negative and one is positive. Except if the parameter "negative" is true, then return true only if both are negative. 

Given a string, return a new string where the first and last chars have been exchanged. 

We'll say that a number is "teen" if it is in the range 13..19 inclusive. Given 2 int values, return true if one or the other is teen, but not both. 

Given a string, return a string made of the first 2 chars (if present), however include first char only if it is 'o' and include the second only if it is 'z', so "ozymandias" yields "oz". 

Given 2 int values, return true if they are both in the range 30..40 inclusive, or they are both in the range 40..50 inclusive. 

Return true if the given string contains between 1 and 3 'e' chars. 

Given 2 int values, return whichever value is nearest to the value 10, or return 0 in the event of a tie. Note that Math.abs(n) returns the absolute value of a number. 

Return true if the given string begins with "mix", except the 'm' can be anything, so "pix", "9ix" .. all count. 

Given a string, take the last char and return a new string with the last char added at the front and back, so "cat" yields "tcatt". The original string will be length 1 or more. 

Given a string and a non-negative int n, return a larger string that is n copies of the original string. 
 
Given a string, return true if the first instance of "x" in the string is immediately followed by another "x". 

Given a string, return the count of the number of times that a substring length 2 appears in the string and also as the last 2 chars of the string, so "hixxxhi" yields 1

Given an array of ints, return true if .. 1, 2, 3, .. appears in the array somewhere. 

Given a string, return a string made of the chars at indexes 0,1, 4,5, 8,9 ... so "kittens" yields "kien". 

Given an array of ints, we'll say that a triple is a value appearing 3 times in a row in the array. Return true if the array does not contain any triples. 

Given a string and a non-negative int n, we'll say that the front of the string is the first 3 chars, or whatever is there if the string is less than length 3. Return n copies of the front; 

Given an array of ints, return the number of 9's in the array. 

Count the number of "xx" in the given string. We'll say that overlapping is allowed, so "xxx" contains 2 "xx". 

Given a string, return a version where all the "x" have been removed. Except an "x" at the very start or end should not be removed. 

Return true if the given non-negative number is 1 or 2 more than a multiple of 20.

The number 6 is a truly great number. Given two int values, a and b, return true if either one is 6. Or if their sum or difference is 6.

Given a non-negative number "num", return true if num is within 2 of a multiple of 10.

Given three ints, a b c, return true if it is possible to add two of the ints to get the third. 

Return true if the given non-negative number is a multiple of 3 or 5, but not both. 

Given 2 ints, a and b, return their sum. However, "teen" values in the range 13..19 inclusive, are extra lucky. So if either value is a teen, just return 19. 

Given three ints, a b c, return true if b is greater than a, and c is greater than b. However, with the exception that if "bOk" is true, b does not need to be greater than a. 

Given three ints, a b c, return true if one of them is 10 or more less than one of the others.

Given two ints, each in the range 10..99, return true if there is a digit that appears in both numbers, such as the 2 in 12 and 23

We'll say a number is special if it is a multiple of 11 or if it is one more than a multiple of 11. Return true if the given non-negative number is special.

Return true if the given non-negative number is 1 or 2 less than a multiple of 20.

Your cell phone rings. Return true if you should answer it. Normally you answer, except in the morning you only answer if it is your mom calling. In all cases, if you are asleep, you do not answer. 

Given an array of ints, return true if 6 appears as either the first or last element in the array. The array will be length 1 or more. 

Given 2 arrays of ints, a and b, return true if they have the same first element or they have the same last element. 

Given an array of ints length 3, return a new array with the elements in reverse order.

Given 2 int arrays, a and b, each length 3, return a new array length 2 containing their middle elements. 

Given an int array length 2, return true if it does not contain a 2 or 3. 

Given an int array length 3, if there is a 2 in the array immediately followed by a 3, set the 3 element to 0. Return the changed array. 

Given an array of ints of even length, return a new array length 2 containing the middle two elements from the original array.

We'll say that a 1 immediately followed by a 3 in an array is an "unlucky" 1. Return true if the given array contains an unlucky 1 in the first 2 or last 2 positions in the array. 

Given an array of ints, return true if the array is length 1 or more, and the first element and the last element are equal. 

Given an array of ints length 3, return the sum of all the elements. 

Given an array of ints length 3, figure out which is larger between the first and last elements in the array, and set all the other elements to be that value. Return the changed array.
 
Start with 2 int arrays, a and b, of any length. Return how many of the arrays have 1 as their first element. 

Given 2 int arrays, each length 2, return a new array length 4 containing all their elements. 

Given an array of ints of odd length, look at the first, last, and middle values in the array and return the largest.

Given an array of ints, return the sum of the first 2 elements in the array. If the array length is less than 2, just sum up the elements that exist, returning 0 if the array is length 0. 

Given an int array length 2, return true if it contains a 2 or a 3. 

Given an int array, return true if the array contains 2 twice, or 3 twice. The array will be length 0, 1, or 2.

Given a string name, e.g. "Bob", return a greeting of the form "Hello Bob!". 

Given a string of even length, return the first half. So the string "WooHoo" yields "Woo". 

Given 2 strings, return their concatenation, except omit the first char of each. The strings will be at least length 1. 

Given a string, return true if it ends in "ly". 

Given a string, if the string begins with "red" or "blue" return that color string, otherwise return the empty string. 

Given a string, return a version without the first and last char, so "Hello" yields "ell"

Given a string, return true if "bad" appears starting at index 0 or 1 in the string

Given a string, return true if the first 2 chars in the string also appear at the end of the string



 